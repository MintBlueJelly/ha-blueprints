blueprint:
  author: MintBlueJelly (Christian FÃ¼rst)
  name: MintBlueJelly - Hue Dimmer Switch via ZHA (xqw-v1)
  description: |
    ## Description
    This blueprint handles button presses from Hue Dimmer Switches integrated via ZHA (model RWL021).

    ## Current version
    xqw-v1.0.2

    ## Updates
    - This blueprint is designed to be updatable within major versions (e.g. `xxx-v1.x.x`).
    - If a breaking change is unavoidable, it will trigger a new major version (e.g. `xxx-v2.0.0`).
    - Each major version will be published as a new blueprint in my GitHub repository (e.g. `xxx-v2.yaml`).
    - Minor version updates will be patched into the existing blueprint. They can be safely pulled into your Home Assistant instance by re-importing the blueprint via its context menu.

    See my GitHub repository for more blueprints:
    https://github.com/MintBlueJelly/ha-blueprints
  domain: automation
  input:
    # Triggers
    triggers:
      name: Hue Dimmer Switches
      description: "One or more Hue Dimmer Switches to trigger the automation"
      selector:
        device:
          integration: zha
          model: RWL021
          multiple: true

    # Multiple Presses
    multiple_presses_enabled:
      name: Enable Multiple-Press Actions
      description: Introduces a timeout after a button release to enable double/triple/quadruple-press actions
      default: false
      selector:
        boolean: {}
    multiple_presses_timeout:
      name: Timeout for Multiple-Press Actions
      description: Waits for a subsequent button press within this interval before executing the defined release action
      default: 0.4
      selector:
        number:
          min: 0.3
          max: 1.0
          unit_of_measurement: seconds
          mode: slider
          step: 0.1

    # Short Release
    short_release_on:
      name: Released Button "ON"
      default: []
      selector:
        action: {}
    short_release_up:
      name: Released Button "DIM UP"
      default: []
      selector:
        action: {}
    short_release_down:
      name: Released Button "DIM DOWN"
      default: []
      selector:
        action: {}
    short_release_off:
      name: Released Button "OFF"
      default: []
      selector:
        action: {}

    # Hold
    hold_on:
      name: Holding Button "ON"
      default: []
      selector:
        action: {}
    hold_up:
      name: Holding Button "DIM UP"
      default: []
      selector:
        action: {}
    hold_down:
      name: Holding Button "DIM DOWN"
      default: []
      selector:
        action: {}
    hold_off:
      name: Holding Button "OFF"
      default: []
      selector:
        action: {}

    # Long Release
    long_release_on:
      name: Released Button "ON" after Holding
      default: []
      selector:
        action: {}
    long_release_up:
      name: Released Button "DIM UP" after Holding
      default: []
      selector:
        action: {}
    long_release_down:
      name: Released Button "DIM DOWN" after Holding
      default: []
      selector:
        action: {}
    long_release_off:
      name: Released Button "OFF" after Holding
      default: []
      selector:
        action: {}

    # Double Press
    double_on:
      name: Double-Pressed Button "ON"
      default: []
      selector:
        action: {}
    double_up:
      name: Double-Pressed Button "DIM UP"
      default: []
      selector:
        action: {}
    double_down:
      name: Double-Pressed Button "DIM DOWN"
      default: []
      selector:
        action: {}
    double_off:
      name: Double-Pressed Button "OFF"
      default: []
      selector:
        action: {}

    # Triple Press
    triple_on:
      name: Triple-Pressed Button "ON"
      default: []
      selector:
        action: {}
    triple_up:
      name: Triple-Pressed Button "DIM UP"
      default: []
      selector:
        action: {}
    triple_down:
      name: Triple-Pressed Button "DIM DOWN"
      default: []
      selector:
        action: {}
    triple_off:
      name: Triple-Pressed Button "OFF"
      default: []
      selector:
        action: {}

    # Quadruple Press
    quadruple_on:
      name: Quadruple-Pressed Button "ON"
      default: []
      selector:
        action: {}
    quadruple_up:
      name: Quadruple-Pressed Button "DIM UP"
      default: []
      selector:
        action: {}
    quadruple_down:
      name: Quadruple-Pressed Button "DIM DOWN"
      default: []
      selector:
        action: {}
    quadruple_off:
      name: Quadruple-Pressed Button "OFF"
      default: []
      selector:
        action: {}
  source_url: "https://raw.githubusercontent.com/MintBlueJelly/ha-blueprints/main/Hue%20Dimmer%20Switch/xqw-v1.yaml"

trigger:
  # Short Release
  - platform: event
    event_type: zha_event
    event_data:
      args:
        press_type: "short_release"

    # Hold
  - platform: event
    event_type: zha_event
    event_data:
      args:
        press_type: "hold"

    # Long Release
  - platform: event
    event_type: zha_event
    event_data:
      args:
        press_type: "long_release"

    # Double Press
  - platform: event
    event_type: zha_event
    event_data:
      args:
        press_type: "double_press"

    # Triple Press
  - platform: event
    event_type: zha_event
    event_data:
      args:
        press_type: "triple_press"

    # Quadruple Press
  - platform: event
    event_type: zha_event
    event_data:
      args:
        press_type: "quadruple_press"

variables:
  triggers: !input triggers
  multiple_presses_enabled: !input multiple_presses_enabled
  multiple_presses_timeout: !input multiple_presses_timeout

condition:
  # Proceed only if the event belongs one of the specified devices
  - condition: template
    value_template: >
      {{ trigger.event.data.device_id in triggers }}

action:
  - choose:
      # Short Release
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.args.press_type == 'short_release' }}"
        sequence:
          - delay: >
              {% if (multiple_presses_enabled | bool) %}
                {{ multiple_presses_timeout }}
              {% else %}
                0
              {% endif %}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'on' }}"
                sequence: !input short_release_on
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'up' }}"
                sequence: !input short_release_up
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'down' }}"
                sequence: !input short_release_down
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'off' }}"
                sequence: !input short_release_off

      # Hold
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.args.press_type == 'hold' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'on' }}"
                sequence: !input hold_on
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'up' }}"
                sequence: !input hold_up
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'down' }}"
                sequence: !input hold_down
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'off' }}"
                sequence: !input hold_off

      # Long Release
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.args.press_type == 'long_release' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'on' }}"
                sequence: !input long_release_on
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'up' }}"
                sequence: !input long_release_up
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'down' }}"
                sequence: !input long_release_down
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'off' }}"
                sequence: !input long_release_off

      # Double Press
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.args.press_type == 'double_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'on' }}"
                sequence: !input double_on
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'up' }}"
                sequence: !input double_up
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'down' }}"
                sequence: !input double_down
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'off' }}"
                sequence: !input double_off

      # Triple Press
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.args.press_type == 'triple_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'on' }}"
                sequence: !input triple_on
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'up' }}"
                sequence: !input triple_up
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'down' }}"
                sequence: !input triple_down
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'off' }}"
                sequence: !input triple_off

      # Quadruple Press
      - conditions:
          - condition: template
            value_template: "{{ trigger.event.data.args.press_type == 'quadruple_press' }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'on' }}"
                sequence: !input quadruple_on
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'up' }}"
                sequence: !input quadruple_up
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'down' }}"
                sequence: !input quadruple_down
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.event.data.args.button == 'off' }}"
                sequence: !input quadruple_off

# Restart automation when trigger fires again
mode: restart
